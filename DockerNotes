	##DOCKER
	- Docker is a platform for developing, shipping, and running applications inside containers. Containers are lightweight, portable, and isolated environments that package applications and their dependencies, ensuring consistency across different environments
	
	
	#Docker Container:
	-A container is a lightweight and standalone executable package that includes everything needed to run a piece of software, including code, runtime, system tools, libraries, and settings.
	
	-Containers are isolated from each other and the host system, making them portable and consistent across different environments.
	
	#Docker Image:
	-An image is a read-only template for creating containers. It contains the application code, libraries, and dependencies required to run a specific application.
	
	-Images are the basis for creating containers and can be versioned and shared through container registries like Docker Hub.

	-Create Docker from image
	#docker run --name hakki hello-world

	-List all docker
	#docker -ps all

	-Remove docker
	#docker -f(force) rm 55bfe25ad9ed

	-Create docker with Http service
	#docker run -d(dont sho log) --name Web01 httpd
	#docker run -d --name Web02 ngnix

	-Stop Docker
	#docker stop 0b9659f6b061

	-Run command in Docker
	#docker exec cont3 date

	-Assign Memory or CPU
	#docker run -d --name con20 --memory=512M httpd
	#docker run -d --name con21 --memory=512M --cpus"2" httpd


	#Docker Volume - Docker volumes are a feature in Docker that allows you to manage and persist data outside of the container's file system. Volumes provide a way to share data between containers, store data that persists even if containers are removed or replaced, and manage data separately from the container's lifecycle.

	-Listing Volumes:
	#docker volume ls

	-Show volume configuration
	#docker volume inspect "volumename"
	na@na-ubuntu:~$ docker volume inspect "first_volume"

	Output:
[
    {
        "CreatedAt": "2023-09-06T22:40:34-04:00",
        "Driver": "local",
        "Labels": null,
        "Mountpoint": "/var/lib/docker/volumes/first_volume/_data",
        "Name": "first_volume",
        "Options": null,
        "Scope": "local"
    }
]

	-Create a volume 
	#docker volume create first_volume

	-Assigne volume
	#docker run -it(interactive) --name volume_test -v first_volume:/ozgur httpd sh

	Test:
	-------
	na@na-ubuntu:~$ docker run -it --name volume_test -v first_volume:/ozgur httpd sh
	
	Output:
	# cd ~
	# ls
	# ls
	# ls -l
	total 0
	# cd .
	# cd ..
	# ls
	bin  boot  dev  etc  home  lib  lib32  lib64  libx32  media  mnt  opt  ozgur  proc  root  run  sbin  srv  sys  tmp  usr  var
	

	-Delete all stopped container
	#docker container prune

	#DEMO
	#docker pull acantril/containerofcats
	-Run a container from the downloaded docker image
	#docker run -p 8081:80 acantril/containerofcats

	-We can run the container detached (-d), the terminal will drop back to the command prompt but the container is still running
	#docker run -p 8081:80 -d acantril/containerofcats

	-this command will show the port mappings, host:container (i'll cover this later in the course)
	#docker port <CONTAINERID>

	-we can execute commands inside the container, dont worry if you don't see the qemu part it depends on your architecture
	#docker exec -it <CONTAINERID> ps -aux

	You can even run a shell inside a running container
	#docker exec -it <CONTANERID> sh

	
	-we can restart the container
	#docker restart <CONTAINDERID>

	stop it
	#docker stop <CONTAINERID>
	#docker ps
	#docker ps -a

	#start it again
	#docker start <CONTAINERID>
	#docker ps

	-we can show logs
	#docker logs <CONTAINERID>
	-add timestamps
	#docker logs <CONTAINERID> -t

	-Let's cleanup all the things from this demo
	-Stop the running container
	#docker stop <CONTAINERID>
	-Remove the stopped container
	#docker rm <CONTAINERID>
	-List the images we have locally
	#docker images
	-Remove the image we pulled from dockerhub
	#docker rmi <IMAGEID>



	##Creating Docker Images & Dockerfile Sytanx

	-Creating a 2048 Docker Image
	Move into the app1-2048 folder.
	open the Dockerfile in a text editor of choice.
	Notice how there are 5 lines .. FROM, LABEL, COPY, EXPOSE and CMD. When you build the docker image in the next step, pay attention to how many layers are created in the image.

	-This Dockerfile uses the latest version of the nginx image (which includes a configured installation of NGINX).

	https://hub.docker.com/_/nginx

	-It sets metadata maintainer. It then copies all of the 2048/ folder from the localdocker host/client machine into the /usr/share/nginx/html folder within the image.

	-Finally we use the EXPOSE directive to inform uses of this image that the appplication is running on tcp/80 and use the CMD statement to set the initial process for containers running from this image.

	-To build the image, from the app1-2048 folder we run the docker build command. We use -t to tag the image with 2048 and use . to set the working directory for the command. ANy paths specified in the dockerfile will use . as the starting point ..the working directory.

	#docker build -t dockerized-2048 .

	-Notice how 2 layers are created in the docker image.

	-The first layer is the base image nginx:latest.
	The last layer is created based on the COPY statement to copy in the application files from ./2048.
	Running a 2048 Docker Container
	Run a docker images to show all images on the Docker Host.
	Locate the dockerized-2048 image which you just created.
	This image, is running an application using tcp/80 so we need to use the -p CLI option to run this on an alternative docker host post (this will be discussed in detail later in the course).

	Run a docker container of 2048 using

	#docker run -d -p 8081:80 dockerized-2048

	this will run in detached mode, so your terminal should return to the prompt immediately.

	Verify the container is running with docker ps. Confirm the port mapping with docker port <CONTAINERID>.

	Browse to http://localhost:8081

	Play the game :)

	Cleanup
	Run a docker stop <CONTAINERID> to stop the 2048 container app.
	Run a docker rm <CONTAINERID> to remove the 2048 container.

	Application 2 - Container of Cats
	This dockefile is intentionally less efficient than app1 above. I want you to understand WHY it's less efficient.

	Creating a Container of Cats Docker Image
	Move into the app2-containerofcats folder.
	open the Dockerfile in a text editor of choice.

	Let's review this Dockerfile and specifically identify how it's different from the previous app1.

	First, it uses a different base image. Instead of nginx:latest which is specifically designed for simple ngnix web use-cases, this uses ubi8 which is a universal redhat 8 image (general purpose)
	This image is also larger than other lean image such as alpine and nginx.
	Because this is a general purpose image, we have to install a web server (apache2) in this case via the RUN statement. This creates a layer.
	Next, there are 2 x COPY statements which copy in index.html and contaierandcat*.jpg media files into the image. These two statements create 2 additional layers.
	This dockerfile and resultant image are more generalised. This results in a larger image, and containers which consume more resources.

	To create a docker image for the containerofcats dockerized application we run this command.

	#docker build -t containerofcats .

	notice how much longer it takes to create, vs the 2048 image, even though it's a similar architecture .. web server & some files

	Running a containerofcats Docker Container
	Run a docker images to show all images on the Docker Host.
	Locate the containerofcats image which you just created.
	This image, is running an application using tcp/80 so we need to use the -p CLI option to run this on an alternative docker host post (this will be discussed in detail later in the course).

	Run a docker container of containerofcats using

	#docker run -d -p 8081:80 containerofcats

	this will run in detached mode, so your terminal should return to the prompt immediately.

	Verify the container is running with docker ps. Confirm the port mapping with docker port <CONTAINERID>.

	Browse to http://localhost:8081

	Cleanup
	Run a docker stop <CONTAINERID> to stop the containerofcats container app.
	Run a docker rm <CONTAINERID> to remove the containerofcats container.

	#DOCKER STORAGE, BIND, VOLUME
	This lesson details a few different container storage methods

	-Writable Layer
	-tmpfs
	-bind mounts
	-volumes

	-BIND mounts allow us to mount a file or directory on the host machine into a container. This has pros and cons but it can be useful if you need to see this files on the container host, or access a shared collection of files between container, or between containers and other compute services.

	BIND EXAMPLE
	1-#mkdir mariadb_data
	2-
	docker run \
	 --name db \
	 -e MYSQL_ROOT_PASSWORD=somewordpress \
	 -e MYSQL_PASSWORD=wordpress \
	 -e MYSQL_DATABASE=wordpress \
	 -e MYSQL_USER=wordpress \
	 --mount type=bind,source="$(pwd)"/mariadb_data,target=/var/lib/mysql \
	 -d \
	 mariadb:10.6.4-focal \
	 --default-authentication-plugin=mysql_native_password

	Volumes are the preferred way to adding storage to docker containers outside of the lifecycle of a container. They are managed entirely by docker and work flawlessly on windows container hosts.

	VOLUME EXAMPLE
	1-#docker volume create mariadb_data
	2-#
	docker run \
	 --name db \
	 -e MYSQL_ROOT_PASSWORD=somewordpress \
	 -e MYSQL_PASSWORD=wordpress \
	 -e MYSQL_DATABASE=wordpress \
	 -e MYSQL_USER=wordpress \
	 --mount source=mariadb_data,target=/var/lib/mysql \
	 -d \
	 mariadb:10.6.4-focal \
	 --default-authentication-plugin=mysql_native_password
		
	#DOCKER NETWORKING

	-Docker supports several networking types that allow containers to communicate with each other, with the host system, and with external networks. The choice of networking type depends on your specific use case and requirements. Here are some common Docker networking types:

	1-Bridge Network:
	-Default network mode for Docker containers.
	-Provides private internal network communication between containers on the same host.
	-Containers can be accessed from the host machine using their IP addresses.
	-Use cases include isolating containers on a single host.
	
	2-Host Network:
	-Containers share the host's network namespace.
	-Containers have access to the host's network interfaces directly.
	-Useful for high-performance scenarios where you want containers to have direct access to the host's networking stack.


	#docker network inspect bridge
	-Shows all network config

	#docker network create --driver driver-name network-name
	-New bridge network create.

	Example:
	#docker network create --driver bridge first_network

	#docker network create --driver= bridge --subnet=10.10.0.0/16 --ip-range=10.10.10.0/24 --gateway 10.10.10.10 second_network

	#docker container run -it --network first_network busybox(container) sh
	-Connects to busybox container


	#docker network connect network-name container-name
	#docker network connect first_network test_container
	-You can add second interface to docker

	#docker attach container-name
	-Can connect container working backgroud


	#DOCKER ENVIRONMENT VARIABLE
	-In Docker, environment variables are a crucial mechanism for configuring and customizing containers at runtime. You can use environment variables to pass configuration information, credentials, or other runtime parameters to your containers



	#DOCKER COMPOSE
	-Docker Compose is software used for defining and running multi-container Docker applications. It can handle multiple containers simultaneously in the production, staging, development, testing, and CI environment. Therefore, use Docker Compose to manage the whole software development lifecycle (SDLC).

	-Docker Compose works by applying rules defined in a docker compose file.

	-The YAML file configures the application's services and includes rules specifying how you want them to run. With the file in place, you can start, stop, or rebuild all the services using a single command.


	-Docker compose is a way to create and manage multi-container applications. It works using a YAML configuration file called compose.yaml or docker-compose.yml.

	#Generally using docker compose is a multi-step process:

	-Define each of your containers using a Dockerfile
	-Push those containers to a repository
	-Define a docker compose file
	-use the file via the docker compose command.


	#compose.yaml Example
	services:
	  db:
	    image: mariadb:10.6.4-focal
	    command: '--default-authentication-plugin=mysql_native_password'
	    volumes:
	      - mariadb_data:/var/lib/mysql
	    restart: always
	    environment:
	      - MYSQL_ROOT_PASSWORD=somewordpress
	      - MYSQL_DATABASE=wordpress
	      - MYSQL_USER=wordpress
	      - MYSQL_PASSWORD=wordpress
	    expose:
	      - 3306
	      - 33060
	  wordpress:
	    image: wordpress:latest
	    volumes:
	      - wordpress_data:/var/www/html
	    ports:
	      - 8081:80
	    restart: always
	    environment:
	      - WORDPRESS_DB_HOST=db
	      - WORDPRESS_DB_USER=wordpress
	      - WORDPRESS_DB_PASSWORD=wordpress
	      - WORDPRESS_DB_NAME=wordpress
	volumes:
	  mariadb_data:
	  wordpress_data:



	#CONTAINER REGISTRY
	-A Docker registry is a storage and distribution system for named Docker images.

	-An image might have multiple different versions, identified by their tags.

	-A registry is organized into Docker repositories. Each repository holds all the versions of a specific image.
